pipeline {
    agent any

    environment {
        MAVEN_HOME = '/usr/share/maven'
        SONAR_HOST_URL = 'http://192.168.33.10:9000'
        SONAR_PROJECT_KEY = 'foyer'
        DOCKER_HUB_REPO = 'wissal005/foyer_backend'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'wissal', url: 'https://github.com/dhaouzeineb/tp-foyer.git'
            }
        }

        stage('Build') {
            steps {
                script {
                    sh "${MAVEN_HOME}/bin/mvn clean install"
                }
            }
        }

        stage('Run SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'SonarQubeToken', variable: 'SONAR_TOKEN')]) {
                    script {
                        sh "${MAVEN_HOME}/bin/mvn sonar:sonar -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_TOKEN}"
                    }
                }
            }
        }

        stage('Publish Code Coverage') {
            steps {
                script {
                    sh "${MAVEN_HOME}/bin/mvn jacoco:report"
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: 'target/', allowEmptyArchive: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t ${DOCKER_HUB_REPO}:latest .'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([string(credentialsId: 'dockerHubToken', variable: 'DOCKER_HUB_TOKEN')]) {
                    script {
                        // Login using the Docker Hub token
                        sh "echo $DOCKER_HUB_TOKEN | docker login -u wissal005 --password-stdin"
                        // Push Docker image to Docker Hub
                        sh "docker push ${DOCKER_HUB_REPO}:latest"
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Commands for deployment, such as running docker-compose
                    // Assuming you have a docker-compose.yml file configured for deployment
                    sh 'docker-compose down'
                    sh 'docker-compose up -d'
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
        }
    }
}
