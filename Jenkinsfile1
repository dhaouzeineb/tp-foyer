pipeline {
    agent any

    environment {
        MAVEN_HOME = '/usr/share/maven'
        SONAR_HOST_URL = 'http://192.168.33.10:9000'
        SONAR_PROJECT_KEY = 'foyer'
        DOCKER_HUB_REPO = 'hassen12/foyer_backend'  // Docker Hub repository
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'hassen', url: 'https://github.com/dhaouzeineb/tp-foyer.git'
            }
        }

        stage('Build') {
            steps {
                script {
                    sh "${MAVEN_HOME}/bin/mvn clean install"
                }
            }
        }

        stage('Run SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'SonarQubeToken', variable: 'SONAR_TOKEN')]) {
                    script {
                        sh "${MAVEN_HOME}/bin/mvn sonar:sonar -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_TOKEN}"
                    }
                }
            }
        }

        stage('Build Docker Image') {
                    steps {
                        script {
                            // Building the Docker image with the appropriate tag
                            sh "sudo docker build -t ${DOCKER_HUB_REPO}:latest ."
                        }
                    }
                }

                stage('Push Docker Image') {
                    steps {
                        // Use the credentials for Docker login
                        withCredentials([usernamePassword(credentialsId: 'dockerHubToken', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                            script {
                                // Login to Docker using the credential password via stdin (secure)
                                sh "echo $DOCKER_PASSWORD | sudo docker login -u $DOCKER_USER --password-stdin"

                                // Push the built Docker image to the Docker Hub
                                sh "sudo docker push ${DOCKER_HUB_REPO}:latest"
                            }
                        }
                    }
                }

                stage('Deploy') {
                    steps {
                        script {
                            // Down the current containers (if any)
                            sh 'sudo docker compose down'

                            // Start up the containers in detached mode
                            sh 'sudo docker compose up -d'
                        }
                    }
                }

        stage('Publish Code Coverage') {
            steps {
                script {
                    sh "${MAVEN_HOME}/bin/mvn jacoco:report"
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: 'target/', allowEmptyArchive: true
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
        }
    }
}
