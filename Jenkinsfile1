pipeline {
    agent any

    environment {
        MAVEN_HOME = '/usr/share/maven'
        SONAR_HOST_URL = 'http://192.168.33.10:9000'
        SONAR_PROJECT_KEY = 'foyer'
        DOCKER_HUB_REPO = 'wissal005/foyer_backend'
        DOCKER_CREDENTIALS_ID = 'dockerHubCredentials'  // Replace with your Jenkins Docker credentials ID
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'wissal', url: 'https://github.com/dhaouzeineb/tp-foyer.git'
            }
        }

        stage('Build') {
            steps {
                script {
                    sh "${MAVEN_HOME}/bin/mvn clean install"
                }
            }
        }

        stage('Run SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'SonarQubeToken', variable: 'SONAR_TOKEN')]) {
                    script {
                        sh "${MAVEN_HOME}/bin/mvn sonar:sonar -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_TOKEN}"
                    }
                }
            }
        }

        stage('Publish Code Coverage') {
            steps {
                script {
                    sh "${MAVEN_HOME}/bin/mvn jacoco:report"
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: 'target/', allowEmptyArchive: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                withCredentials([string(credentialsId: 'SUDO_PASSWORD_CREDENTIAL', variable: 'SUDO_PASSWORD')]) {
                    script {
                        // Use sudo with the password securely
                        sh "echo $SUDO_PASSWORD | sudo -S docker build -t ${DOCKER_HUB_REPO}:latest ."
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    withCredentials([string(credentialsId: 'SUDO_PASSWORD_CREDENTIAL', variable: 'SUDO_PASSWORD')]) {
                        script {
                            // Log in to Docker Hub with credentials and push the image
                            sh "echo $SUDO_PASSWORD | sudo -S docker login -u $DOCKER_USERNAME --password-stdin"
                            sh "echo $SUDO_PASSWORD | sudo -S docker push ${DOCKER_HUB_REPO}:latest"
                        }
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                withCredentials([string(credentialsId: 'SUDO_PASSWORD_CREDENTIAL', variable: 'SUDO_PASSWORD')]) {
                    script {
                        // Commands for deployment using docker-compose
                        sh "echo $SUDO_PASSWORD | sudo -S docker-compose down"
                        sh "echo $SUDO_PASSWORD | sudo -S docker-compose up -d"
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline completed.'
        }
    }
}
